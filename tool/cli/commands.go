// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "cluster": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-cluster/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-cluster-client
// --pkg=cluster
// --version=v1.3.0

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/fabric8-services/fabric8-cluster-client/cluster"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// CreateClustersCommand is the command line data structure for the create action of clusters
	CreateClustersCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteClustersCommand is the command line data structure for the delete action of clusters
	DeleteClustersCommand struct {
		// the ID of the cluster to delete
		ClusterID   string
		PrettyPrint bool
	}

	// LinkIdentityToClusterClustersCommand is the command line data structure for the linkIdentityToCluster action of clusters
	LinkIdentityToClusterClustersCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ListClustersCommand is the command line data structure for the list action of clusters
	ListClustersCommand struct {
		PrettyPrint bool
	}

	// ListForAuthClientClustersCommand is the command line data structure for the listForAuthClient action of clusters
	ListForAuthClientClustersCommand struct {
		PrettyPrint bool
	}

	// RemoveIdentityToClusterLinkClustersCommand is the command line data structure for the removeIdentityToClusterLink action of clusters
	RemoveIdentityToClusterLinkClustersCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ShowClustersCommand is the command line data structure for the show action of clusters
	ShowClustersCommand struct {
		// the ID of the cluster to show
		ClusterID   string
		PrettyPrint bool
	}

	// ShowForAuthClientClustersCommand is the command line data structure for the showForAuthClient action of clusters
	ShowForAuthClientClustersCommand struct {
		// the ID of the cluster to show
		ClusterID   string
		PrettyPrint bool
	}

	// ShowStatusCommand is the command line data structure for the show action of status
	ShowStatusCommand struct {
		PrettyPrint bool
	}

	// ClustersUserCommand is the command line data structure for the clusters action of user
	ClustersUserCommand struct {
		PrettyPrint bool
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *cluster.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "clusters",
		Short: `Get clusters available to user`,
	}
	tmp1 := new(ClustersUserCommand)
	sub = &cobra.Command{
		Use:   `user ["/api/user/clusters"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "create",
		Short: `Add a cluster configuration`,
	}
	tmp2 := new(CreateClustersCommand)
	sub = &cobra.Command{
		Use:   `clusters ["/api/clusters/"]`,
		Short: ``,
		Long: `

Payload example:

{
   "data": {
      "api-url": "Odit quia.",
      "app-dns": "Delectus reprehenderit maiores alias.",
      "auth-client-default-scope": "Quidem et sequi modi placeat.",
      "auth-client-id": "Eaque voluptates nulla enim repudiandae molestias.",
      "auth-client-secret": "Sint accusantium occaecati quas eos sint.",
      "capacity-exhausted": false,
      "console-url": "Quae omnis consectetur corporis voluptatibus voluptate.",
      "logging-url": "Temporibus occaecati at in nulla expedita.",
      "metrics-url": "Temporibus voluptas.",
      "name": "Molestias doloremque ut ut iusto.",
      "service-account-token": "Assumenda alias aut est et saepe aut.",
      "service-account-username": "Excepturi fugit aut a.",
      "token-provider-id": "Voluptatem dolorem id autem voluptatum voluptatem recusandae.",
      "type": "Quaerat nesciunt."
   },
   "included": [
      true
   ]
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `Delete a cluster configuration`,
	}
	tmp3 := new(DeleteClustersCommand)
	sub = &cobra.Command{
		Use:   `clusters ["/api/clusters/CLUSTERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "link-identity-to-cluster",
		Short: `create a identitycluster using a service account`,
	}
	tmp4 := new(LinkIdentityToClusterClustersCommand)
	sub = &cobra.Command{
		Use:   `clusters ["/api/clusters/identities"]`,
		Short: ``,
		Long: `

Payload example:

{
   "cluster-url": "Aut tenetur veniam non minus.",
   "identity-id": "Placeat voluptatem qui in cumque qui.",
   "ignore-if-already-exists": false
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `Get all cluster configurations`,
	}
	tmp5 := new(ListClustersCommand)
	sub = &cobra.Command{
		Use:   `clusters ["/api/clusters/"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-for-auth-client",
		Short: `Get all cluster configurations (including Auth information)`,
	}
	tmp6 := new(ListForAuthClientClustersCommand)
	sub = &cobra.Command{
		Use:   `clusters ["/api/clusters/auth"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "remove-identity-to-cluster-link",
		Short: `Remove a identity cluster relation using a service account`,
	}
	tmp7 := new(RemoveIdentityToClusterLinkClustersCommand)
	sub = &cobra.Command{
		Use:   `clusters ["/api/clusters/identities"]`,
		Short: ``,
		Long: `

Payload example:

{
   "cluster-url": "Voluptas omnis consequatur odit vel inventore.",
   "identity-id": "Et quidem."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `show action`,
	}
	tmp8 := new(ShowClustersCommand)
	sub = &cobra.Command{
		Use:   `clusters ["/api/clusters/CLUSTERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp9 := new(ShowStatusCommand)
	sub = &cobra.Command{
		Use:   `status ["/api/status"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show-for-auth-client",
		Short: `Get single cluster configuration (including Auth information)`,
	}
	tmp10 := new(ShowForAuthClientClustersCommand)
	sub = &cobra.Command{
		Use:   `clusters ["/api/clusters/CLUSTERID/auth"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp10.Run(c, args) },
	}
	tmp10.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp10.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run makes the HTTP request corresponding to the CreateClustersCommand command.
func (cmd *CreateClustersCommand) Run(c *cluster.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/clusters/"
	}
	var payload cluster.CreateClustersPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateClusters(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateClustersCommand) RegisterFlags(cc *cobra.Command, c *cluster.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteClustersCommand command.
func (cmd *DeleteClustersCommand) Run(c *cluster.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/clusters/%v", cmd.ClusterID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteClusters(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteClustersCommand) RegisterFlags(cc *cobra.Command, c *cluster.Client) {
	var clusterID string
	cc.Flags().StringVar(&cmd.ClusterID, "clusterID", clusterID, `the ID of the cluster to delete`)
}

// Run makes the HTTP request corresponding to the LinkIdentityToClusterClustersCommand command.
func (cmd *LinkIdentityToClusterClustersCommand) Run(c *cluster.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/clusters/identities"
	}
	var payload cluster.LinkIdentityToClusterData
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LinkIdentityToClusterClusters(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LinkIdentityToClusterClustersCommand) RegisterFlags(cc *cobra.Command, c *cluster.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ListClustersCommand command.
func (cmd *ListClustersCommand) Run(c *cluster.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/clusters/"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListClusters(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListClustersCommand) RegisterFlags(cc *cobra.Command, c *cluster.Client) {
}

// Run makes the HTTP request corresponding to the ListForAuthClientClustersCommand command.
func (cmd *ListForAuthClientClustersCommand) Run(c *cluster.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/clusters/auth"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListForAuthClientClusters(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListForAuthClientClustersCommand) RegisterFlags(cc *cobra.Command, c *cluster.Client) {
}

// Run makes the HTTP request corresponding to the RemoveIdentityToClusterLinkClustersCommand command.
func (cmd *RemoveIdentityToClusterLinkClustersCommand) Run(c *cluster.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/clusters/identities"
	}
	var payload cluster.UnLinkIdentityToClusterdata
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RemoveIdentityToClusterLinkClusters(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RemoveIdentityToClusterLinkClustersCommand) RegisterFlags(cc *cobra.Command, c *cluster.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ShowClustersCommand command.
func (cmd *ShowClustersCommand) Run(c *cluster.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/clusters/%v", cmd.ClusterID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowClusters(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowClustersCommand) RegisterFlags(cc *cobra.Command, c *cluster.Client) {
	var clusterID string
	cc.Flags().StringVar(&cmd.ClusterID, "clusterID", clusterID, `the ID of the cluster to show`)
}

// Run makes the HTTP request corresponding to the ShowForAuthClientClustersCommand command.
func (cmd *ShowForAuthClientClustersCommand) Run(c *cluster.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/clusters/%v/auth", cmd.ClusterID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowForAuthClientClusters(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowForAuthClientClustersCommand) RegisterFlags(cc *cobra.Command, c *cluster.Client) {
	var clusterID string
	cc.Flags().StringVar(&cmd.ClusterID, "clusterID", clusterID, `the ID of the cluster to show`)
}

// Run makes the HTTP request corresponding to the ShowStatusCommand command.
func (cmd *ShowStatusCommand) Run(c *cluster.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/status"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowStatus(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowStatusCommand) RegisterFlags(cc *cobra.Command, c *cluster.Client) {
}

// Run makes the HTTP request corresponding to the ClustersUserCommand command.
func (cmd *ClustersUserCommand) Run(c *cluster.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/user/clusters"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ClustersUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ClustersUserCommand) RegisterFlags(cc *cobra.Command, c *cluster.Client) {
}
